"use strict";var Movie=require("../models/Movie");exports.createMovie=function(r,t){var n,s,a,o,u;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n=r.body,s=n.title,a=n.director,o=n.year,u=new Movie({title:s,director:a,year:o}),e.next=5,regeneratorRuntime.awrap(u.save());case 5:t.status(201).json(u),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(0),t.status(500).json({message:"Error creating Movie",error:e.t0});case 11:case"end":return e.stop()}},null,null,[[0,8]])},exports.getAllMovies=function(e,r){var t;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,regeneratorRuntime.awrap(Movie.find());case 3:t=e.sent,r.json(t),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),r.status(500).json({message:"Error fetching Movies",error:e.t0});case 10:case"end":return e.stop()}},null,null,[[0,7]])},exports.getMovieById=function(r,t){var n,s;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return n=r.params.id,e.prev=1,e.next=4,regeneratorRuntime.awrap(Movie.findById(n));case 4:if(s=e.sent){e.next=7;break}return e.abrupt("return",t.status(404).json({message:"Movie not found"}));case 7:t.json(s),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),t.status(500).json({message:"Error fetching Movie",error:e.t0});case 13:case"end":return e.stop()}},null,null,[[1,10]])},exports.updateMovieById=function(r,t){var n,s;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return n=r.params.id,e.prev=1,e.next=4,regeneratorRuntime.awrap(Movie.findByIdAndUpdate(n,r.body,{new:!0}));case 4:if(s=e.sent){e.next=7;break}return e.abrupt("return",t.status(404).json({message:"Movie not found"}));case 7:t.json(s),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),t.status(500).json({message:"Error updating Movie",error:e.t0});case 13:case"end":return e.stop()}},null,null,[[1,10]])},exports.deleteMovieById=function(r,t){var n;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return n=r.params.id,e.prev=1,e.next=4,regeneratorRuntime.awrap(Movie.findByIdAndDelete(n));case 4:if(e.sent){e.next=7;break}return e.abrupt("return",t.status(404).json({message:"Movie not found"}));case 7:t.json({message:"Movie deleted successfully"}),e.next=13;break;case 10:e.prev=10,e.t0=e.catch(1),t.status(500).json({message:"Error deleting movie",error:e.t0});case 13:case"end":return e.stop()}},null,null,[[1,10]])};
//# sourceMappingURL=movieController.min.js.map
