{"version":3,"sources":["movieController.js"],"names":["Movie","require","exports","req","res","_req$body","title","director","year","newMovie","regeneratorRuntime","async","_context","prev","next","body","createMovie","awrap","save","status","json","t0","message","error","stop","movies","_context2","find","sent","id","movie","_context3","params","findById","abrupt","updateMovieById","updatedMovie","_context4","findByIdAndUpdate","new","getAllMovies","deleteMovieById","_context5","findByIdAndDelete"],"mappings":"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","file":"movieController.min.js","sourcesContent":["const Movie = require('../models/Movie');\r\n\r\nexports.createMovie = async (req, res) => {\r\n  try {\r\n    const { title, director, year } = req.body;\r\n    const newMovie = new Movie({ title, director, year });\r\n    await newMovie.save();\r\n    res.status(201).json(newMovie);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error creating Movie', error });\r\n  }\r\n};\r\n\r\nexports.getAllMovies = async (req, res) => {\r\n  try {\r\n    const movies = await Movie.find();\r\n    res.json(movies);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error fetching Movies', error });\r\n  }\r\n};\r\n\r\nexports.getMovieById = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const movie = await Movie.findById(id);\r\n    if (!movie) {\r\n      return res.status(404).json({ message: 'Movie not found' });\r\n    }\r\n    res.json(movie);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error fetching Movie', error });\r\n  }\r\n};\r\n\r\nexports.updateMovieById = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const updatedMovie = await Movie.findByIdAndUpdate(id, req.body, { new: true });\r\n    if (!updatedMovie) {\r\n      return res.status(404).json({ message: 'Movie not found' });\r\n    }\r\n    res.json(updatedMovie);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error updating Movie', error });\r\n  }\r\n};\r\n\r\nexports.deleteMovieById = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const deletedMovie= await Movie.findByIdAndDelete(id);\r\n    if (!deletedMovie) {\r\n      return res.status(404).json({ message: 'Movie not found' });\r\n    }\r\n    res.json({ message: 'Movie deleted successfully' });\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error deleting movie', error });\r\n  }\r\n};\r\n"]}