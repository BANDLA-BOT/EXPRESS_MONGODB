{"version":3,"sources":["movieController.js"],"names":["Movie","require","exports","createMovie","req","res","body","title","director","year","newMovie","save","status","json","message","error","getAllMovies","find","movies","getMovieById","id","params","findById","movie","updateMovieById","findByIdAndUpdate","updatedMovie","deleteMovieById","findByIdAndDelete","deletedMovie"],"mappings":"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","sourcesContent":["const Movie = require('../models/Movie');\r\n\r\nexports.createMovie = async (req, res) => {\r\n  try {\r\n    const { title, director, year } = req.body;\r\n    const newMovie = new Movie({ title, director, year });\r\n    await newMovie.save();\r\n    res.status(201).json(newMovie);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error creating Movie', error });\r\n  }\r\n};\r\n\r\nexports.getAllMovies = async (req, res) => {\r\n  try {\r\n    const movies = await Movie.find();\r\n    res.json(movies);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error fetching Movies', error });\r\n  }\r\n};\r\n\r\nexports.getMovieById = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const movie = await Movie.findById(id);\r\n    if (!movie) {\r\n      return res.status(404).json({ message: 'Movie not found' });\r\n    }\r\n    res.json(movie);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error fetching Movie', error });\r\n  }\r\n};\r\n\r\nexports.updateMovieById = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const updatedMovie = await Movie.findByIdAndUpdate(id, req.body, { new: true });\r\n    if (!updatedMovie) {\r\n      return res.status(404).json({ message: 'Movie not found' });\r\n    }\r\n    res.json(updatedMovie);\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error updating Movie', error });\r\n  }\r\n};\r\n\r\nexports.deleteMovieById = async (req, res) => {\r\n  const { id } = req.params;\r\n  try {\r\n    const deletedMovie= await Movie.findByIdAndDelete(id);\r\n    if (!deletedMovie) {\r\n      return res.status(404).json({ message: 'Movie not found' });\r\n    }\r\n    res.json({ message: 'Movie deleted successfully' });\r\n  } catch (error) {\r\n    res.status(500).json({ message: 'Error deleting movie', error });\r\n  }\r\n};\r\n"],"file":"movieController.dev.js"}